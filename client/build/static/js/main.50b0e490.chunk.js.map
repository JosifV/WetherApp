{"version":3,"sources":["components/Header.js","components/Currently.js","components/Alerts.js","components/NextSevenDays.js","pages/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Currently","props","icon","lib_default","name","iconId","flip","rotate","temperature","summary","locationStr","humidity","pressure","windSpeed","ozone","uvIndex","visibility","hourly","Alerts","console","log","title","description","moment","require","NextSevenDays","data","map","x","index","key","add","format","temperatureLow","temperatureHigh","MainComponent","_useState","useState","_useState2","Object","slicedToArray","alertArr","setAllertArr","_useState3","_useState4","currentlyObj","setCurrentlyObj","_useState5","_useState6","dailyObj","setDailyObj","_useState7","_useState8","hourlyObj","setHourlyObj","_useState9","_useState10","setLocationStr","useEffect","navigator","geolocation","getCurrentPosition","position","lats","coords","latitude","lngs","longitude","axios","get","then","resp","info","alerts","currently","daily","location","catch","err","msg","components_Header","components_Currently","assign","components_NextSevenDays","components_Alerts","App","src_pages_MainComponent","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.50b0e490.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <h1 className=\"h1Main\">Weather app</h1>;\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport WeatherIcon from \"react-icons-weather\";\r\n\r\nconst Currently = props => {\r\n  return (\r\n    <div className=\"divCurrently\">\r\n      <div>\r\n        {props.icon ? (\r\n          <div>\r\n            <div className=\"divIcon\">\r\n              <WeatherIcon\r\n                name=\"darksky\"\r\n                iconId={props.icon}\r\n                flip=\"horizontal\"\r\n                rotate=\"90\"\r\n              />\r\n              <h3 className=\"h3Temp\">{props.temperature + \"°\"}</h3>\r\n            </div>\r\n            <div className=\"divSummary\">\r\n              <h5 className=\"h5Summary\">{props.summary}</h5>\r\n              <h3 className=\"h3Location\">{props.locationStr}</h3>\r\n            </div>\r\n            <div className=\"divCurrentGrid\">\r\n              <div className=\"divCurrentGridItem\">\r\n                <p>Rel Humidity</p>\r\n                {props.humidity + \" %\"}\r\n              </div>\r\n              <div className=\"divCurrentGridItem\">\r\n                <p>Air Pressure</p>\r\n                {props.pressure + \" mbar\"}\r\n              </div>\r\n              <div className=\"divCurrentGridItem\">\r\n                <p>Wind Speed</p>\r\n                {props.windSpeed + \" m/s\"}\r\n              </div>\r\n              <div className=\"divCurrentGridItem\">\r\n                <p>Ozone</p>\r\n                {props.ozone + \" DU\"}\r\n              </div>\r\n              <div className=\"divCurrentGridItem\">\r\n                <p>UV Index</p>\r\n                {props.uvIndex + \" UV\"}\r\n              </div>\r\n              <div className=\"divCurrentGridItem\">\r\n                <p>Visibility</p>\r\n                {props.visibility + \" km\"}\r\n              </div>\r\n            </div>\r\n            <div className=\"divRestOfTheDay\">{props.hourly}</div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Currently;\r\n","import React from \"react\";\r\n\r\nconst Alerts = props => {\r\n  console.log(props);\r\n  return (\r\n    <div>\r\n      {props.title ? (\r\n        <div className=\"divMainAlerts\">\r\n          <div className=\"divAlertsContainer\">\r\n            <h4>{\"Alert - \" + props.title}</h4>\r\n            <p>{props.description}</p>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alerts;\r\n","import React from \"react\";\r\nimport WeatherIcon from \"react-icons-weather\";\r\nconst moment = require(\"moment\");\r\n\r\nconst NextSevenDays = props => {\r\n  return (\r\n    <div>\r\n      {props.data ? (\r\n        <div>\r\n          <h3 className=\"h3NextSevenDaysSummary\">{props.summary}</h3>\r\n          <div className=\"divNextSevenDays\">\r\n            {props.data.map((x, index) => {\r\n              return (\r\n                <div className=\"divItemNextSevenDays\" key={index}>\r\n                  <div className=\"divItemNextSevenDaysIcon\">\r\n                    <h5 className=\"h5DateNextSDays\">\r\n                      {moment()\r\n                        .add(index, \"days\")\r\n                        .format(\"ddd DD MMM\")}\r\n                    </h5>\r\n                    <WeatherIcon\r\n                      name=\"darksky\"\r\n                      iconId={x.icon}\r\n                      flip=\"horizontal\"\r\n                      rotate=\"90\"\r\n                    />\r\n                    <h5 className=\"h5DateNextSDays\">\r\n                      {x.temperatureLow + \"°\"} {x.temperatureHigh + \"°\"}\r\n                    </h5>\r\n                  </div>\r\n                  <div className=\"divNextSDaysSummary\">\r\n                    <h3 className=\"h3NextSDaysSummary\">{x.summary}</h3>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NextSevenDays;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Header from \"../components/Header\";\r\nimport Currently from \"../components/Currently\";\r\nimport Alerts from \"../components/Alerts\";\r\nimport NextSevenDays from \"../components/NextSevenDays\";\r\nimport \"./MainComponent.scss\";\r\n\r\nconst MainComponent = () => {\r\n  const [alertArr, setAllertArr] = useState([]);\r\n  const [currentlyObj, setCurrentlyObj] = useState({});\r\n  const [dailyObj, setDailyObj] = useState({});\r\n  const [hourlyObj, setHourlyObj] = useState({});\r\n  const [locationStr, setLocationStr] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // find location\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(success, error);\r\n    } else {\r\n      console.log(\"location not supported\");\r\n    }\r\n    function error(msg) {\r\n      console.log(\"error in geolocation\");\r\n    }\r\n    function success(position) {\r\n      const lats = position.coords.latitude;\r\n      const lngs = position.coords.longitude;\r\n      console.log(\"userLatitude \" + lats);\r\n      console.log(\"userLongitude \" + lngs);\r\n      // fetch data\r\n      axios\r\n        .get(\"/forecast/\" + lats + \"/\" + lngs)\r\n        .then(resp => {\r\n          console.log(resp.data);\r\n          const info = resp.data;\r\n          setAllertArr(info.alerts);\r\n          setCurrentlyObj(info.currently);\r\n          setDailyObj(info.daily);\r\n          setHourlyObj(info.hourly);\r\n          setLocationStr(info.location);\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n  return (\r\n    <div className=\"divMain\">\r\n      <Header />\r\n      {currentlyObj ? (\r\n        <div>\r\n          <Currently\r\n            hourly={hourlyObj.summary}\r\n            locationStr={locationStr}\r\n            {...currentlyObj}\r\n          />\r\n          {dailyObj ? <NextSevenDays {...dailyObj} /> : null}\r\n          {alertArr ? <Alerts {...alertArr} /> : null}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainComponent;\r\n","import React from \"react\";\nimport MainComponent from \"./pages/MainComponent\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div>\n      <MainComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}